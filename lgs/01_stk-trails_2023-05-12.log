
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # ------------------------------------------------------------------------------
> # run this in terminal as:
> #  nohup R < rscripts/01_stk-trails.R --vanilla > lgs/01_stk-trails_YYYY_MM-DD.log &
> 
> lubridate::now()
[1] "2023-05-12 09:40:07 GMT"
> 
> library(data.table)
> library(sf)
Linking to GEOS 3.9.0, GDAL 3.2.2, PROJ 7.2.1; sf_use_s2() is TRUE
> library(mapdeck)
> source("~/R/Pakkar2/ramb/TOPSECRET.R")
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.0     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.2     ✔ tibble    3.2.0
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ tibble::add_column() masks mapdeck::add_column()
✖ dplyr::between()     masks data.table::between()
✖ dplyr::filter()      masks stats::filter()
✖ dplyr::first()       masks data.table::first()
✖ lubridate::hour()    masks data.table::hour()
✖ lubridate::isoweek() masks data.table::isoweek()
✖ dplyr::lag()         masks stats::lag()
✖ dplyr::last()        masks data.table::last()
✖ lubridate::mday()    masks data.table::mday()
✖ lubridate::minute()  masks data.table::minute()
✖ lubridate::month()   masks data.table::month()
✖ lubridate::quarter() masks data.table::quarter()
✖ lubridate::second()  masks data.table::second()
✖ purrr::transpose()   masks data.table::transpose()
✖ lubridate::wday()    masks data.table::wday()
✖ lubridate::week()    masks data.table::week()
✖ lubridate::yday()    masks data.table::yday()
✖ lubridate::year()    masks data.table::year()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> options(ggplot2.continuous.colour = "viridis")
> options(ggplot2.continuous.fill = "viridis")
> library(ramb)
> library(omar)
> library(argosfilter)
> 
> island <- read_sf("data-raw/island.gpkg")
> harbour <- read_sf("data-raw/harbours-hidstd.gpkg")
> harbours.standards <- 
+   read_csv("data-raw/stk_harbours.csv") |> 
+   select(hid, hid_std)
Rows: 231 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (6): hid, hid_std, harbour, comments, name, hafnarnumer_heiti
dbl (4): hid_channel, landing_harbour, hafnarnumer_id, hafnarnumer

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> con <- connect_mar()
> 
> YEARS <- 2007:2023
> D1 <- paste0(min(YEARS), "-01-01")
> D2 <- paste0(max(YEARS), "-12-31")
> 
> # Make the connection for each fishing vessel trail ----------------------------
> vessels <- 
+   omar::ln_agf(con) |> 
+   filter(between(date, to_date(D1, "YYYY-MM-DD"), to_date(D2, "YYYY-MM-DD"))) |> 
+   filter(!between(vid, 3700, 4999)) |>
+   filter(vid > 0) |> 
+   group_by(vid) |> 
+   summarise(wt = sum(wt, na.rm = TRUE) / 1e3,
+             .groups = "drop") |> 
+   filter(wt > 0) |> 
+   left_join(omar:::stk_midvid(con) |> 
+               select(mid, vid, t1, t2, pings),
+             by = "vid")
> vessels |> 
+   collect(n = Inf) |> 
+   filter(is.na(mid)) |> 
+   knitr::kable(caption = "Vessels with no mid-match")


Table: Vessels with no mid-match

|  vid|          wt| mid|t1 |t2 | pings|
|----:|-----------:|---:|:--|:--|-----:|
| 2644|  7790.38500|  NA|NA |NA |    NA|
| 7874|     4.65100|  NA|NA |NA |    NA|
| 9928|    16.56254|  NA|NA |NA |    NA|
| 2621|    39.81500|  NA|NA |NA |    NA|
| 8007|     0.09900|  NA|NA |NA |    NA|
| 7872|     1.08800|  NA|NA |NA |    NA|
| 9938|    16.35821|  NA|NA |NA |    NA|
| 8008|    11.70900|  NA|NA |NA |    NA|
| 9911|    35.70591|  NA|NA |NA |    NA|
| 2753|    98.72900|  NA|NA |NA |    NA|
| 9910|     0.22424|  NA|NA |NA |    NA|
| 9908|    32.87102|  NA|NA |NA |    NA|
| 9922|     5.93107|  NA|NA |NA |    NA|
| 7880|     3.12900|  NA|NA |NA |    NA|
| 1809| 15671.31800|  NA|NA |NA |    NA|
| 1599|   110.87465|  NA|NA |NA |    NA|
| 7714|   238.71100|  NA|NA |NA |    NA|
| 9927|     8.21970|  NA|NA |NA |    NA|
| 9999|  2092.15171|  NA|NA |NA |    NA|
> 
> trail <-
+   vessels |> 
+   filter(!is.na(mid)) |> 
+   select(vid, mid, t1, t2) |> 
+   mutate(t1 = to_date(t1, "YYYY:MM:DD"),
+          t2 = to_date(t2, "YYYY:MM:DD")) |> 
+   left_join(omar::stk_trail(con),
+             by = "mid") |> 
+   filter(time >= t1 & time <= t2)
> 
> # Extract trail by vessel ------------------------------------------------------
> VID <- 
+   vessels |> 
+   filter(!is.na(mid)) |> 
+   collect(n = Inf) |> 
+   pull(vid) |> 
+   sort() |> 
+   unique()
> 
> v_counter <- list()
> for(v in 1:length(VID)) {
+   VIDv <- VID[v]
+   print(VIDv)
+   trailv <- 
+     trail |> 
+     filter(vid == VIDv) |> 
+     select(-c(t1, t2)) |> 
+     collect(n = Inf) |> 
+     arrange(time) |> 
+     filter(between(lon, -35, 30),
+            between(lat, 50, 79)) %>%
+     left_join(harbours.standards,
+               by = "hid") |> 
+     st_as_sf(coords = c("lon", "lat"),
+              crs = 4326,
+              remove = FALSE) |> 
+     st_join(harbour) |> 
+     st_join(island) |> 
+     st_drop_geometry() |> 
+     # 2023-05-12: 
+     #             if point in harbour, then not on land
+     # mutate(on_land = replace_na(on_land, FALSE)) |> 
+     mutate(on_land = case_when(!is.na(hid_std.y)  & on_land == TRUE ~ FALSE,
+                                is.na(hid_std.y)   & on_land == TRUE ~ TRUE,
+                                .default = FALSE)) |> 
+     # The order matters
+     arrange(vid, time, hid_std.x, io) |> 
+     mutate(.rid = 1:n())
+   tmp <- 
+     trailv |> 
+     filter(!on_land) |> 
+     distinct(time, .keep_all = TRUE)
+   removed <- 
+     trailv |> 
+     filter(!.rid %in% tmp$.rid)
+   
+   trailv <- 
+     tmp |> 
+     # cruise id (aka tripid), negative values: in harbour
+     mutate(.cid = ramb::rb_trip(!is.na(hid_std.y))) |>
+     group_by(vid, .cid) |> 
+     mutate(trip.n = 1:n()) |> 
+     ungroup() |> 
+     mutate(hid_dep = hid_std.y,
+            hid_arr = hid_std.y) |> 
+     group_by(vid) |> 
+     fill(hid_dep, .direction = "down") |> 
+     fill(hid_arr, .direction = "up") |> 
+     ungroup() |> 
+     filter(between(year(time), 2007, 2023)) |> 
+     select(vid, time, .cid, lon, lat, speed, hid_dep, hid_arr, .rid, trip.n) |> 
+     # filter(.cid > 0) |> 
+     group_by(vid, .cid) |> 
+     mutate(pings = n()) |> 
+     mutate(v = ifelse(pings > 5 & .cid > 0,
+                       # Note: FIRST arguement is lat
+                       vmask(lat, lon, time, vmax = rb_kn2ms(30)),
+                       "short")) |> 
+     ungroup() |> 
+     mutate(v = as.character(v)) |> 
+     select(-pings)
+   
+   trailv <-
+     bind_rows(trailv,
+               removed |> 
+                 mutate(v = case_when(on_land == TRUE ~ "removed on land",
+                                      .default = "removed time duplicate")) |> 
+                 select(vid, time, lon, lat, speed, .rid, v)) |> 
+               arrange(.rid)
+               
+               
+               # split the data by year, because downstream we want to collate the data by
+               #  year for all vessels
+               YEARS <- year(min(trailv$time)):year(max(trailv$time))
+               for(y in 1:length(YEARS)) {
+                 pth <- paste0("trails/stk-trails_y", YEARS[y], "_v", str_pad(VIDv, width = 4, pad = "0"), ".rds") 
+                 tmp <- trailv |> filter(year(time) == YEARS[y]) 
+                 if(nrow(tmp) > 0) tmp |> write_rds(pth)
+               }
+ }
[1] 10
[1] 13
[1] 67
[1] 78
[1] 84
[1] 89
[1] 91
[1] 100
[1] 117
[1] 124
[1] 137
[1] 155
[1] 173
[1] 177
[1] 182
[1] 183
[1] 219
[1] 220
[1] 233
[1] 237
[1] 239
[1] 243
[1] 250
[1] 253
[1] 256
[1] 259
[1] 264
[1] 288
[1] 363
[1] 396
[1] 399
[1] 500
[1] 530
[1] 616
[1] 617
[1] 733
[1] 741
[1] 795
[1] 923
[1] 926
[1] 962
[1] 964
[1] 967
[1] 968
[1] 971
[1] 972
[1] 975
[1] 997
[1] 1006
[1] 1009
[1] 1014
[1] 1019
[1] 1028
[1] 1030
[1] 1031
[1] 1039
[1] 1043
[1] 1054
[1] 1056
[1] 1060
[1] 1062
[1] 1063
[1] 1068
[1] 1076
[1] 1081
[1] 1084
[1] 1092
[1] 1100
[1] 1102
[1] 1109
[1] 1126
[1] 1131
[1] 1134
[1] 1135
[1] 1136
[1] 1143
[1] 1146
[1] 1148
[1] 1149
[1] 1153
[1] 1159
[1] 1178
[1] 1184
[1] 1192
[1] 1202
[1] 1204
[1] 1231
[1] 1236
[1] 1244
[1] 1246
[1] 1254
[1] 1262
[1] 1269
[1] 1270
[1] 1272
[1] 1274
[1] 1275
[1] 1277
[1] 1278
[1] 1279
[1] 1281
[1] 1291
[1] 1293
[1] 1300
[1] 1303
[1] 1304
[1] 1308
[1] 1315
[1] 1318
[1] 1321
[1] 1324
[1] 1327
[1] 1328
[1] 1337
[1] 1343
[1] 1345
[1] 1350
[1] 1351
[1] 1354
[1] 1357
[1] 1360
[1] 1371
[1] 1373
[1] 1376
[1] 1379
[1] 1395
[1] 1396
[1] 1399
[1] 1401
[1] 1403
[1] 1414
[1] 1416
[1] 1420
[1] 1424
[1] 1426
[1] 1428
[1] 1429
[1] 1430
[1] 1432
[1] 1434
[1] 1436
[1] 1438
[1] 1440
[1] 1445
[1] 1451
[1] 1458
[1] 1463
[1] 1470
[1] 1472
[1] 1475
[1] 1476
[1] 1481
[1] 1489
[1] 1490
[1] 1499
[1] 1500
[1] 1502
[1] 1509
[1] 1511
[1] 1516
[1] 1523
[1] 1524
[1] 1525
[1] 1527
[1] 1530
[1] 1533
[1] 1535
[1] 1538
[1] 1540
[1] 1542
[1] 1543
[1] 1544
[1] 1546
[1] 1560
[1] 1561
[1] 1562
[1] 1563
[1] 1565
[1] 1568
[1] 1570
[1] 1574
[1] 1575
[1] 1578
[1] 1579
[1] 1581
[1] 1582
[1] 1585
[1] 1587
[1] 1590
[1] 1591
[1] 1595
[1] 1600
[1] 1606
[1] 1610
[1] 1611
[1] 1612
[1] 1618
[1] 1621
[1] 1622
[1] 1628
[1] 1629
[1] 1631
[1] 1633
[1] 1636
[1] 1637
[1] 1639
[1] 1642
[1] 1644
[1] 1645
[1] 1650
[1] 1661
[1] 1664
[1] 1666
[1] 1674
[1] 1675
[1] 1684
[1] 1686
[1] 1687
[1] 1688
[1] 1695
[1] 1698
[1] 1730
[1] 1733
[1] 1734
[1] 1735
[1] 1737
[1] 1742
[1] 1743
[1] 1744
[1] 1745
[1] 1750
[1] 1751
[1] 1752
[1] 1755
[1] 1756
[1] 1760
[1] 1761
[1] 1762
[1] 1764
[1] 1765
[1] 1767
[1] 1769
[1] 1770
[1] 1771
[1] 1773
[1] 1774
[1] 1775
[1] 1776
[1] 1777
[1] 1779
[1] 1785
[1] 1787
[1] 1790
[1] 1791
[1] 1792
[1] 1794
[1] 1796
[1] 1802
[1] 1803
[1] 1807
[1] 1808
[1] 1811
[1] 1813
[1] 1815
[1] 1819
[1] 1823
[1] 1827
[1] 1828
[1] 1829
[1] 1831
[1] 1833
[1] 1834
[1] 1836
[1] 1841
[1] 1842
[1] 1844
[1] 1847
[1] 1848
[1] 1849
[1] 1850
[1] 1851
[1] 1852
[1] 1855
[1] 1856
[1] 1857
[1] 1858
[1] 1859
[1] 1861
[1] 1862
[1] 1866
[1] 1867
[1] 1868
[1] 1871
[1] 1873
[1] 1875
[1] 1876
[1] 1881
[1] 1882
[1] 1883
[1] 1887
[1] 1888
[1] 1890
[1] 1893
[1] 1900
[1] 1901
[1] 1902
[1] 1903
[1] 1904
[1] 1905
[1] 1906
[1] 1907
[1] 1909
[1] 1910
[1] 1911
[1] 1913
[1] 1914
[1] 1915
[1] 1918
[1] 1920
[1] 1921
[1] 1922
[1] 1924
[1] 1925
[1] 1926
[1] 1927
[1] 1928
[1] 1929
[1] 1930
[1] 1932
[1] 1937
[1] 1938
[1] 1947
[1] 1951
[1] 1952
[1] 1954
[1] 1955
[1] 1957
[1] 1958
[1] 1959
[1] 1963
[1] 1964
[1] 1968
[1] 1969
[1] 1971
[1] 1972
[1] 1976
[1] 1977
[1] 1979
[1] 1985
[1] 1986
[1] 1988
[1] 1990
[1] 1991
[1] 1992
[1] 1998
[1] 1999
[1] 2005
[1] 2006
[1] 2008
[1] 2010
[1] 2012
[1] 2014
[1] 2017
[1] 2018
[1] 2019
[1] 2020
[1] 2024
[1] 2025
[1] 2032
[1] 2033
[1] 2040
[1] 2045
[1] 2047
[1] 2048
[1] 2049
[1] 2050
[1] 2051
[1] 2055
[1] 2056
[1] 2061
[1] 2062
[1] 2064
[1] 2065
[1] 2067
[1] 2068
[1] 2069
[1] 2070
[1] 2072
[1] 2076
[1] 2081
[1] 2082
[1] 2084
[1] 2085
[1] 2086
[1] 2088
[1] 2089
[1] 2090
[1] 2091
[1] 2093
[1] 2097
[1] 2098
[1] 2099
[1] 2101
[1] 2102
[1] 2104
[1] 2106
[1] 2110
[1] 2112
[1] 2122
[1] 2125
[1] 2126
[1] 2129
[1] 2134
[1] 2136
[1] 2138
[1] 2139
[1] 2145
[1] 2147
[1] 2148
[1] 2150
[1] 2151
[1] 2153
[1] 2154
[1] 2157
[1] 2158
[1] 2159
[1] 2160
[1] 2161
[1] 2162
[1] 2163
[1] 2166
[1] 2170
[1] 2171
[1] 2173
[1] 2174
[1] 2175
[1] 2177
[1] 2178
[1] 2179
[1] 2182
[1] 2183
[1] 2184
[1] 2185
[1] 2189
[1] 2190
[1] 2192
[1] 2195
[1] 2197
[1] 2199
[1] 2203
[1] 2207
[1] 2209
[1] 2212
[1] 2225
[1] 2238
[1] 2240
[1] 2243
[1] 2256
[1] 2257
[1] 2262
[1] 2264
[1] 2265
[1] 2274
[1] 2276
[1] 2280
[1] 2281
[1] 2282
[1] 2287
[1] 2289
[1] 2290
[1] 2298
[1] 2303
[1] 2304
[1] 2306
[1] 2307
[1] 2309
[1] 2313
[1] 2314
[1] 2315
[1] 2316
[1] 2317
[1] 2318
[1] 2319
[1] 2320
[1] 2321
[1] 2323
[1] 2324
[1] 2325
[1] 2326
[1] 2327
[1] 2328
[1] 2330
[1] 2331
[1] 2332
[1] 2335
[1] 2338
[1] 2339
[1] 2340
[1] 2341
[1] 2342
[1] 2345
[1] 2347
[1] 2350
[1] 2352
[1] 2354
[1] 2356
[1] 2357
[1] 2358
[1] 2359
[1] 2360
[1] 2361
[1] 2363
[1] 2364
[1] 2365
[1] 2367
[1] 2368
[1] 2370
[1] 2373
[1] 2374
[1] 2375
[1] 2376
[1] 2379
[1] 2381
[1] 2383
[1] 2384
[1] 2385
[1] 2386
[1] 2387
[1] 2388
[1] 2389
[1] 2390
[1] 2392
[1] 2394
[1] 2395
[1] 2397
[1] 2398
[1] 2399
[1] 2400
[1] 2401
[1] 2402
[1] 2403
[1] 2404
[1] 2405
[1] 2406
[1] 2407
[1] 2408
[1] 2410
[1] 2411
[1] 2415
[1] 2416
[1] 2417
[1] 2418
[1] 2419
[1] 2421
[1] 2423
[1] 2426
[1] 2428
[1] 2430
[1] 2431
[1] 2432
[1] 2433
[1] 2434
[1] 2435
[1] 2436
[1] 2437
[1] 2438
[1] 2440
[1] 2441
[1] 2442
[1] 2443
[1] 2444
[1] 2446
[1] 2447
[1] 2449
[1] 2450
[1] 2451
[1] 2452
[1] 2453
[1] 2454
[1] 2457
[1] 2458
[1] 2459
[1] 2461
[1] 2462
[1] 2463
[1] 2464
[1] 2465
[1] 2468
[1] 2471
[1] 2477
[1] 2478
[1] 2479
[1] 2480
[1] 2481
[1] 2482
[1] 2483
[1] 2484
[1] 2485
[1] 2486
[1] 2488
[1] 2491
[1] 2493
[1] 2494
[1] 2495
[1] 2497
[1] 2499
[1] 2500
[1] 2501
[1] 2502
[1] 2504
[1] 2507
[1] 2508
[1] 2510
[1] 2512
[1] 2515
[1] 2517
[1] 2519
[1] 2529
[1] 2532
[1] 2535
[1] 2538
[1] 2539
[1] 2540
[1] 2544
[1] 2545
[1] 2547
[1] 2549
[1] 2552
[1] 2553
[1] 2555
[1] 2557
[1] 2558
[1] 2560
[1] 2564
[1] 2567
[1] 2568
[1] 2570
[1] 2571
[1] 2572
[1] 2574
[1] 2575
[1] 2576
[1] 2577
[1] 2578
[1] 2579
[1] 2580
[1] 2581
[1] 2584
[1] 2585
[1] 2586
[1] 2587
[1] 2588
[1] 2589
[1] 2590
[1] 2594
[1] 2595
[1] 2596
[1] 2597
[1] 2599
[1] 2600
[1] 2604
[1] 2605
[1] 2606
[1] 2608
[1] 2612
[1] 2614
[1] 2615
[1] 2617
[1] 2618
[1] 2620
[1] 2622
[1] 2624
[1] 2625
[1] 2626
[1] 2628
[1] 2630
[1] 2631
[1] 2632
[1] 2635
[1] 2640
[1] 2641
[1] 2643
[1] 2645
[1] 2646
[1] 2649
[1] 2650
[1] 2651
[1] 2652
[1] 2654
[1] 2655
[1] 2656
[1] 2657
[1] 2658
[1] 2660
[1] 2661
[1] 2662
[1] 2664
[1] 2666
[1] 2668
[1] 2669
[1] 2670
[1] 2671
[1] 2672
[1] 2673
[1] 2677
[1] 2678
[1] 2680
[1] 2682
[1] 2685
[1] 2689
[1] 2690
[1] 2694
[1] 2696
[1] 2699
[1] 2700
[1] 2701
[1] 2702
[1] 2704
[1] 2705
[1] 2706
[1] 2708
[1] 2710
[1] 2711
[1] 2712
[1] 2714
[1] 2716
[1] 2718
[1] 2726
[1] 2728
[1] 2730
[1] 2731
[1] 2732
[1] 2733
[1] 2736
[1] 2737
[1] 2739
[1] 2740
[1] 2744
[1] 2746
[1] 2747
[1] 2749
[1] 2750
[1] 2751
[1] 2754
[1] 2755
[1] 2757
[1] 2758
[1] 2760
[1] 2763
[1] 2764
[1] 2765
[1] 2766
[1] 2770
[1] 2771
[1] 2772
[1] 2773
[1] 2774
[1] 2775
[1] 2778
[1] 2780
[1] 2781
[1] 2782
[1] 2783
[1] 2784
[1] 2786
[1] 2789
[1] 2790
[1] 2793
[1] 2794
[1] 2795
[1] 2796
[1] 2799
[1] 2800
[1] 2803
[1] 2805
[1] 2806
[1] 2809
[1] 2810
[1] 2811
[1] 2812
[1] 2813
[1] 2814
[1] 2817
[1] 2818
[1] 2819
[1] 2820
[1] 2822
[1] 2823
[1] 2824
[1] 2825
[1] 2826
[1] 2827
[1] 2828
[1] 2829
[1] 2830
[1] 2833
[1] 2834
[1] 2836
[1] 2841
[1] 2842
[1] 2843
[1] 2847
[1] 2860
[1] 2861
[1] 2862
[1] 2865
[1] 2866
[1] 2867
[1] 2868
[1] 2869
[1] 2870
[1] 2871
[1] 2878
[1] 2880
[1] 2881
[1] 2882
[1] 2883
[1] 2885
[1] 2888
[1] 2889
[1] 2890
[1] 2891
[1] 2892
[1] 2893
[1] 2894
[1] 2895
[1] 2900
[1] 2902
[1] 2903
[1] 2904
[1] 2905
[1] 2906
[1] 2907
[1] 2908
[1] 2909
[1] 2911
[1] 2912
[1] 2917
[1] 2919
[1] 2929
[1] 2936
[1] 2939
[1] 2940
[1] 2944
[1] 2947
[1] 2949
[1] 2951
[1] 2952
[1] 2954
[1] 2956
[1] 2957
[1] 2958
[1] 2959
[1] 2961
[1] 2962
[1] 2963
[1] 2964
[1] 2965
[1] 2966
[1] 2969
[1] 2970
[1] 2978
[1] 2982
[1] 2983
[1] 2986
[1] 2991
[1] 2992
[1] 2995
[1] 2997
[1] 2999
[1] 3000
[1] 3007
[1] 3010
[1] 3013
[1] 3015
[1] 3016
[1] 3017
[1] 3030
[1] 3035
[1] 3038
[1] 5155
[1] 5183
[1] 5227
[1] 5239
[1] 5313
[1] 5342
[1] 5377
[1] 5420
[1] 5443
[1] 5466
[1] 5493
[1] 5600
[1] 5665
[1] 5668
[1] 5713
[1] 5714
[1] 5723
[1] 5806
[1] 5808
[1] 5815
[1] 5823
[1] 5843
[1] 5846
[1] 5848
[1] 5871
[1] 5874
[1] 5877
[1] 5885
[1] 5889
[1] 5890
[1] 5892
[1] 5894
[1] 5903
[1] 5907
[1] 5909
[1] 5910
[1] 5913
[1] 5915
[1] 5920
[1] 5922
[1] 5923
[1] 5930
[1] 5932
[1] 5940
[1] 5946
[1] 5959
[1] 5960
[1] 5964
[1] 5967
[1] 5968
[1] 5972
[1] 5973
[1] 5974
[1] 5978
[1] 5982
[1] 5986
[1] 5990
[1] 5995
[1] 5996
[1] 6002
[1] 6004
[1] 6006
[1] 6008
[1] 6013
[1] 6015
[1] 6019
[1] 6020
[1] 6021
[1] 6024
[1] 6028
[1] 6030
[1] 6032
[1] 6033
[1] 6035
[1] 6036
[1] 6037
[1] 6038
[1] 6039
[1] 6041
[1] 6044
[1] 6045
[1] 6047
[1] 6048
[1] 6055
[1] 6058
[1] 6061
[1] 6063
[1] 6066
[1] 6070
[1] 6072
[1] 6074
[1] 6075
[1] 6077
[1] 6079
[1] 6083
[1] 6085
[1] 6086
[1] 6087
[1] 6089
[1] 6094
[1] 6096
[1] 6100
[1] 6105
[1] 6106
[1] 6107
[1] 6108
[1] 6110
[1] 6111
[1] 6112
[1] 6113
[1] 6116
[1] 6120
[1] 6121
[1] 6123
[1] 6125
[1] 6126
[1] 6129
[1] 6130
[1] 6131
[1] 6132
[1] 6134
[1] 6136
[1] 6137
[1] 6141
[1] 6143
[1] 6145
[1] 6147
[1] 6148
[1] 6149
[1] 6150
[1] 6152
[1] 6154
[1] 6155
[1] 6158
[1] 6159
[1] 6166
[1] 6167
[1] 6169
[1] 6170
[1] 6175
[1] 6181
[1] 6182
[1] 6185
[1] 6186
[1] 6189
[1] 6190
[1] 6191
[1] 6192
[1] 6194
[1] 6195
[1] 6196
[1] 6199
[1] 6200
[1] 6202
[1] 6204
[1] 6206
[1] 6208
[1] 6209
[1] 6212
[1] 6214
[1] 6215
[1] 6218
[1] 6220
[1] 6222
[1] 6223
[1] 6225
[1] 6229
[1] 6230
[1] 6236
[1] 6237
[1] 6242
[1] 6243
[1] 6244
[1] 6246
[1] 6247
[1] 6248
[1] 6249
[1] 6250
[1] 6252
[1] 6256
[1] 6261
[1] 6272
[1] 6273
[1] 6280
[1] 6282
[1] 6283
[1] 6284
[1] 6287
[1] 6289
[1] 6293
[1] 6297
[1] 6298
[1] 6299
[1] 6301
[1] 6302
[1] 6305
[1] 6306
[1] 6310
[1] 6311
[1] 6314
[1] 6322
[1] 6324
[1] 6325
[1] 6329
[1] 6330
[1] 6331
[1] 6337
[1] 6338
[1] 6341
[1] 6342
[1] 6345
[1] 6347
[1] 6349
[1] 6350
[1] 6353
[1] 6355
[1] 6360
[1] 6361
[1] 6364
[1] 6366
[1] 6368
[1] 6369
[1] 6373
[1] 6376
[1] 6377
[1] 6379
[1] 6381
[1] 6382
[1] 6386
[1] 6387
[1] 6388
[1] 6389
[1] 6390
[1] 6391
[1] 6394
[1] 6395
[1] 6399
[1] 6401
[1] 6403
[1] 6405
[1] 6408
[1] 6412
[1] 6413
[1] 6416
[1] 6417
[1] 6418
[1] 6420
[1] 6421
[1] 6423
[1] 6429
[1] 6431
[1] 6437
[1] 6440
[1] 6443
[1] 6450
[1] 6451
[1] 6452
[1] 6453
[1] 6454
[1] 6457
[1] 6458
[1] 6462
[1] 6465
[1] 6466
[1] 6470
[1] 6473
[1] 6474
[1] 6476
[1] 6477
[1] 6478
[1] 6484
[1] 6486
[1] 6487
[1] 6488
[1] 6489
[1] 6492
[1] 6494
[1] 6499
[1] 6503
[1] 6504
[1] 6507
[1] 6512
[1] 6513
[1] 6517
[1] 6518
[1] 6523
[1] 6526
[1] 6529
[1] 6533
[1] 6534
[1] 6537
[1] 6539
[1] 6540
[1] 6545
[1] 6546
[1] 6548
[1] 6549
[1] 6550
[1] 6552
[1] 6555
[1] 6560
[1] 6562
[1] 6563
[1] 6565
[1] 6567
[1] 6569
[1] 6571
[1] 6573
[1] 6575
[1] 6579
[1] 6582
[1] 6583
[1] 6584
[1] 6586
[1] 6587
[1] 6588
[1] 6589
[1] 6591
[1] 6593
[1] 6595
[1] 6598
[1] 6599
[1] 6600
[1] 6603
[1] 6605
[1] 6607
[1] 6609
[1] 6610
[1] 6614
[1] 6616
[1] 6617
[1] 6618
[1] 6619
[1] 6620
[1] 6625
[1] 6626
[1] 6627
[1] 6628
[1] 6629
[1] 6632
[1] 6633
[1] 6634
[1] 6639
[1] 6641
[1] 6643
[1] 6644
[1] 6648
[1] 6649
[1] 6650
[1] 6651
[1] 6652
[1] 6658
[1] 6659
[1] 6662
[1] 6664
[1] 6666
[1] 6668
[1] 6669
[1] 6673
[1] 6674
[1] 6675
[1] 6677
[1] 6678
[1] 6680
[1] 6684
[1] 6686
[1] 6688
[1] 6689
[1] 6692
[1] 6697
[1] 6698
[1] 6700
[1] 6702
[1] 6703
[1] 6705
[1] 6707
[1] 6708
[1] 6710
[1] 6711
[1] 6712
[1] 6715
[1] 6716
[1] 6717
[1] 6719
[1] 6725
[1] 6726
[1] 6728
[1] 6732
[1] 6737
[1] 6738
[1] 6739
[1] 6743
[1] 6745
[1] 6752
[1] 6753
[1] 6754
[1] 6755
[1] 6757
[1] 6759
[1] 6762
[1] 6764
[1] 6765
[1] 6768
[1] 6769
[1] 6770
[1] 6771
[1] 6776
[1] 6777
[1] 6780
[1] 6783
[1] 6784
[1] 6787
[1] 6789
[1] 6790
[1] 6792
[1] 6794
[1] 6795
[1] 6796
[1] 6798
[1] 6801
[1] 6802
[1] 6804
[1] 6806
[1] 6807
[1] 6811
[1] 6814
[1] 6816
[1] 6817
[1] 6821
[1] 6822
[1] 6823
[1] 6824
[1] 6825
[1] 6826
[1] 6827
[1] 6830
[1] 6835
[1] 6836
[1] 6837
[1] 6838
[1] 6841
[1] 6845
[1] 6847
[1] 6848
[1] 6849
[1] 6852
[1] 6856
[1] 6857
[1] 6858
[1] 6859
[1] 6860
[1] 6863
[1] 6865
[1] 6867
[1] 6868
[1] 6871
[1] 6874
[1] 6875
[1] 6877
[1] 6878
[1] 6880
[1] 6882
[1] 6883
[1] 6885
[1] 6886
[1] 6888
[1] 6889
[1] 6890
[1] 6893
[1] 6894
[1] 6896
[1] 6899
[1] 6901
[1] 6905
[1] 6908
[1] 6909
[1] 6911
[1] 6915
[1] 6917
[1] 6918
[1] 6919
[1] 6921
[1] 6931
[1] 6933
[1] 6934
[1] 6935
[1] 6936
[1] 6939
[1] 6941
[1] 6943
[1] 6945
[1] 6946
[1] 6947
[1] 6952
[1] 6955
[1] 6957
[1] 6958
[1] 6961
[1] 6962
[1] 6969
[1] 6973
[1] 6974
[1] 6975
[1] 6976
[1] 6978
[1] 6979
[1] 6982
[1] 6986
[1] 6987
[1] 6988
[1] 6990
[1] 6991
[1] 6992
[1] 6996
[1] 6998
[1] 6999
[1] 7000
[1] 7001
[1] 7002
[1] 7005
[1] 7007
[1] 7008
[1] 7009
[1] 7011
[1] 7019
[1] 7020
[1] 7021
[1] 7022
[1] 7023
[1] 7025
[1] 7028
[1] 7029
[1] 7031
[1] 7032
[1] 7037
[1] 7038
[1] 7040
[1] 7041
[1] 7046
[1] 7049
[1] 7050
[1] 7051
[1] 7053
[1] 7055
[1] 7056
[1] 7057
[1] 7059
[1] 7060
[1] 7061
[1] 7062
[1] 7064
[1] 7065
[1] 7066
[1] 7067
[1] 7068
[1] 7072
[1] 7074
[1] 7075
[1] 7076
[1] 7077
[1] 7078
[1] 7081
[1] 7082
[1] 7084
[1] 7087
[1] 7088
[1] 7092
[1] 7095
[1] 7096
[1] 7097
[1] 7098
[1] 7103
[1] 7104
[1] 7105
[1] 7106
[1] 7111
[1] 7112
[1] 7113
[1] 7116
[1] 7118
[1] 7120
[1] 7121
[1] 7124
[1] 7125
[1] 7126
[1] 7127
[1] 7133
[1] 7136
[1] 7143
[1] 7144
[1] 7145
[1] 7147
[1] 7150
[1] 7151
[1] 7152
[1] 7154
[1] 7156
[1] 7157
[1] 7159
[1] 7160
[1] 7161
[1] 7162
[1] 7164
[1] 7168
[1] 7170
[1] 7172
[1] 7173
[1] 7175
[1] 7176
[1] 7180
[1] 7183
[1] 7184
[1] 7185
[1] 7186
[1] 7188
[1] 7189
[1] 7190
[1] 7191
[1] 7192
[1] 7194
[1] 7196
[1] 7201
[1] 7202
[1] 7203
[1] 7204
[1] 7205
[1] 7206
[1] 7207
[1] 7211
[1] 7212
[1] 7213
[1] 7214
[1] 7219
[1] 7220
[1] 7221
[1] 7223
[1] 7226
[1] 7228
[1] 7230
[1] 7233
[1] 7234
[1] 7236
[1] 7242
[1] 7243
[1] 7246
[1] 7250
[1] 7253
[1] 7254
[1] 7255
[1] 7259
[1] 7260
[1] 7261
[1] 7262
[1] 7263
[1] 7266
[1] 7268
[1] 7269
[1] 7272
[1] 7277
[1] 7278
[1] 7281
[1] 7284
[1] 7287
[1] 7288
[1] 7296
[1] 7298
[1] 7303
[1] 7305
[1] 7309
[1] 7311
[1] 7313
[1] 7315
[1] 7316
[1] 7317
[1] 7320
[1] 7321
[1] 7322
[1] 7323
[1] 7325
[1] 7328
[1] 7329
[1] 7331
[1] 7332
[1] 7334
[1] 7335
[1] 7336
[1] 7337
[1] 7338
[1] 7339
[1] 7343
[1] 7344
[1] 7346
[1] 7347
[1] 7349
[1] 7352
[1] 7353
[1] 7354
[1] 7355
[1] 7356
[1] 7357
[1] 7359
[1] 7361
[1] 7362
[1] 7363
[1] 7364
[1] 7366
[1] 7367
[1] 7369
[1] 7372
[1] 7373
[1] 7376
[1] 7377
[1] 7381
[1] 7382
[1] 7386
[1] 7388
[1] 7389
[1] 7392
[1] 7393
[1] 7395
[1] 7396
[1] 7398
[1] 7400
[1] 7401
[1] 7402
[1] 7409
[1] 7410
[1] 7411
[1] 7412
[1] 7413
[1] 7414
[1] 7415
[1] 7416
[1] 7417
[1] 7418
[1] 7419
[1] 7420
[1] 7421
[1] 7423
[1] 7426
[1] 7427
[1] 7428
[1] 7429
[1] 7430
[1] 7431
[1] 7432
[1] 7433
[1] 7435
[1] 7437
[1] 7439
[1] 7443
[1] 7444
[1] 7445
[1] 7447
[1] 7448
[1] 7449
[1] 7453
[1] 7454
[1] 7455
[1] 7456
[1] 7458
[1] 7459
[1] 7461
[1] 7462
[1] 7463
[1] 7464
[1] 7465
[1] 7466
[1] 7467
[1] 7472
[1] 7474
[1] 7478
[1] 7479
[1] 7480
[1] 7485
[1] 7486
[1] 7490
[1] 7494
[1] 7495
[1] 7498
[1] 7499
[1] 7501
[1] 7505
[1] 7514
[1] 7515
[1] 7518
[1] 7519
[1] 7526
[1] 7527
[1] 7528
[1] 7531
[1] 7532
[1] 7533
[1] 7534
[1] 7537
[1] 7538
[1] 7539
[1] 7545
[1] 7547
[1] 7554
[1] 7555
[1] 7556
[1] 7557
[1] 7558
[1] 7559
[1] 7560
[1] 7561
[1] 7562
[1] 7568
[1] 7579
[1] 7580
[1] 7581
[1] 7582
[1] 7583
[1] 7584
[1] 7585
[1] 7586
[1] 7587
[1] 7588
[1] 7589
[1] 7594
[1] 7595
[1] 7596
[1] 7597
[1] 7598
[1] 7599
[1] 7600
[1] 7601
[1] 7602
[1] 7603
[1] 7604
[1] 7605
[1] 7606
[1] 7607
[1] 7608
[1] 7609
[1] 7610
[1] 7611
[1] 7612
[1] 7613
[1] 7614
[1] 7615
[1] 7637
[1] 7641
[1] 7642
[1] 7661
[1] 7664
[1] 7666
[1] 7668
[1] 7670
[1] 7676
[1] 7680
[1] 7681
[1] 7682
[1] 7683
[1] 7685
[1] 7690
[1] 7691
[1] 7694
[1] 7696
[1] 7697
[1] 7701
[1] 7702
[1] 7703
[1] 7704
[1] 7708
[1] 7709
[1] 7711
[1] 7716
[1] 7718
[1] 7720
[1] 7727
[1] 7729
[1] 7730
[1] 7737
[1] 7742
[1] 7744
[1] 7755
[1] 7756
[1] 7757
[1] 7758
[1] 7760
[1] 7762
[1] 7763
[1] 7768
[1] 7769
[1] 7781
[1] 7787
[1] 7788
[1] 7789
[1] 7837
[1] 7838
[1] 7839
[1] 9002
[1] 9037
[1] 9048
[1] 9055
[1] 9806
[1] 9810
[1] 9848
[1] 9850
[1] 9851
[1] 9852
[1] 9853
Warning messages:
1: In left_join(., harbours.standards, by = "hid") :
  Each row in `x` is expected to match at most 1 row in `y`.
ℹ Row 52132 of `x` matches multiple rows.
ℹ If multiple matches are expected, set `multiple = "all"` to silence this
  warning.
2: In left_join(., harbours.standards, by = "hid") :
  Each row in `x` is expected to match at most 1 row in `y`.
ℹ Row 7589 of `x` matches multiple rows.
ℹ If multiple matches are expected, set `multiple = "all"` to silence this
  warning.
3: In left_join(., harbours.standards, by = "hid") :
  Each row in `x` is expected to match at most 1 row in `y`.
ℹ Row 7589 of `x` matches multiple rows.
ℹ If multiple matches are expected, set `multiple = "all"` to silence this
  warning.
4: In left_join(., harbours.standards, by = "hid") :
  Each row in `x` is expected to match at most 1 row in `y`.
ℹ Row 5622 of `x` matches multiple rows.
ℹ If multiple matches are expected, set `multiple = "all"` to silence this
  warning.
> 
> 
> lubridate::now()
[1] "2023-05-12 19:56:21 GMT"
> 
> devtools::session_info()
─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.2.2 (2022-10-31)
 os       Debian GNU/Linux 11 (bullseye)
 system   x86_64, linux-gnu
 ui       X11
 language (EN)
 collate  is_IS.UTF-8
 ctype    is_IS.UTF-8
 tz       Atlantic/Reykjavik
 date     2023-05-12
 pandoc   2.9.2.1 @ /usr/bin/pandoc

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version    date (UTC) lib source
 argosfilter * 0.70       2022-09-13 [1] CRAN (R 4.2.2)
 bit           4.0.5      2022-11-15 [1] CRAN (R 4.2.2)
 bit64         4.0.5      2020-08-30 [1] CRAN (R 4.2.2)
 blob          1.2.4      2023-03-17 [1] CRAN (R 4.2.2)
 cachem        1.0.7      2023-02-24 [1] CRAN (R 4.2.2)
 callr         3.7.3      2022-11-02 [1] CRAN (R 4.2.2)
 class         7.3-20     2022-01-13 [3] CRAN (R 4.2.2)
 classInt      0.4-9      2023-02-28 [1] CRAN (R 4.2.2)
 cli           3.6.1      2023-03-23 [1] CRAN (R 4.2.2)
 colorspace    2.1-0      2023-01-23 [1] CRAN (R 4.2.2)
 crayon        1.5.2      2022-09-29 [1] CRAN (R 4.2.2)
 data.table  * 1.14.8     2023-02-17 [1] CRAN (R 4.2.2)
 DBI           1.1.3      2022-06-18 [1] CRAN (R 4.2.2)
 dbplyr        2.3.2      2023-03-21 [1] CRAN (R 4.2.2)
 devtools      2.4.5      2022-10-11 [1] CRAN (R 4.2.2)
 digest        0.6.31     2022-12-11 [1] CRAN (R 4.2.2)
 dplyr       * 1.1.0      2023-01-29 [1] CRAN (R 4.2.2)
 e1071         1.7-13     2023-02-01 [1] CRAN (R 4.2.2)
 ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.2.2)
 fansi         1.0.4      2023-01-22 [1] CRAN (R 4.2.2)
 fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.2.2)
 forcats     * 1.0.0      2023-01-29 [1] CRAN (R 4.2.2)
 fs            1.6.1      2023-02-06 [1] CRAN (R 4.2.2)
 generics      0.1.3      2022-07-05 [1] CRAN (R 4.2.2)
 ggplot2     * 3.4.2      2023-04-03 [1] CRAN (R 4.2.2)
 glue          1.6.2      2022-02-24 [1] CRAN (R 4.2.2)
 gtable        0.3.3      2023-03-21 [1] CRAN (R 4.2.2)
 hms           1.1.3      2023-03-21 [1] CRAN (R 4.2.2)
 htmltools     0.5.5      2023-03-23 [1] CRAN (R 4.2.2)
 htmlwidgets   1.6.2      2023-03-17 [1] CRAN (R 4.2.2)
 httpuv        1.6.9      2023-02-14 [1] CRAN (R 4.2.2)
 KernSmooth    2.23-20    2021-05-03 [3] CRAN (R 4.2.2)
 knitr         1.42       2023-01-25 [1] CRAN (R 4.2.2)
 later         1.3.0      2021-08-18 [1] CRAN (R 4.2.2)
 lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.2.2)
 lubridate   * 1.9.2      2023-02-10 [1] CRAN (R 4.2.2)
 magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.2.2)
 mapdeck     * 0.3.4      2020-09-04 [1] CRAN (R 4.2.2)
 memoise       2.0.1      2021-11-26 [1] CRAN (R 4.2.2)
 mime          0.12       2021-09-28 [1] CRAN (R 4.2.2)
 miniUI        0.1.1.1    2018-05-18 [1] CRAN (R 4.2.2)
 munsell       0.5.0      2018-06-12 [1] CRAN (R 4.2.2)
 omar        * 2023.01.18 2023-04-25 [1] local
 pillar        1.9.0      2023-03-22 [1] CRAN (R 4.2.2)
 pkgbuild      1.4.0      2022-11-27 [1] CRAN (R 4.2.2)
 pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.2.2)
 pkgload       1.3.2      2022-11-16 [1] CRAN (R 4.2.2)
 prettyunits   1.1.1      2020-01-24 [1] CRAN (R 4.2.2)
 processx      3.8.1      2023-04-18 [1] CRAN (R 4.2.2)
 profvis       0.3.7      2020-11-02 [1] CRAN (R 4.2.2)
 promises      1.2.0.1    2021-02-11 [1] CRAN (R 4.2.2)
 proxy         0.4-27     2022-06-09 [1] CRAN (R 4.2.2)
 ps            1.7.5      2023-04-18 [1] CRAN (R 4.2.2)
 purrr       * 1.0.1      2023-01-10 [1] CRAN (R 4.2.2)
 R6            2.5.1      2021-08-19 [1] CRAN (R 4.2.2)
 ramb        * 0.2.0      2023-05-09 [1] local
 Rcpp          1.0.10     2023-01-22 [1] CRAN (R 4.2.2)
 readr       * 2.1.4      2023-02-10 [1] CRAN (R 4.2.2)
 remotes       2.4.2      2021-11-30 [1] CRAN (R 4.2.2)
 rlang         1.1.0      2023-03-14 [1] CRAN (R 4.2.2)
 ROracle       1.3-1.1    2021-11-10 [2] CRAN (R 4.2.2)
 rstudioapi    0.14       2022-08-22 [1] CRAN (R 4.2.2)
 s2            1.1.2      2023-01-12 [1] CRAN (R 4.2.2)
 scales        1.2.1      2022-08-20 [1] CRAN (R 4.2.2)
 sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.2.2)
 sf          * 1.0-12     2023-03-19 [1] CRAN (R 4.2.2)
 shiny         1.7.4      2022-12-15 [1] CRAN (R 4.2.2)
 stringi       1.7.12     2023-01-11 [1] CRAN (R 4.2.2)
 stringr     * 1.5.0      2022-12-02 [1] CRAN (R 4.2.2)
 tibble      * 3.2.0      2023-03-08 [1] CRAN (R 4.2.2)
 tidyr       * 1.3.0      2023-01-24 [1] CRAN (R 4.2.2)
 tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.2.2)
 tidyverse   * 2.0.0      2023-02-22 [1] CRAN (R 4.2.2)
 timechange    0.2.0      2023-01-11 [1] CRAN (R 4.2.2)
 tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.2.2)
 units         0.8-1      2022-12-10 [1] CRAN (R 4.2.2)
 urlchecker    1.0.1      2021-11-30 [1] CRAN (R 4.2.2)
 usethis       2.1.6      2022-05-25 [1] CRAN (R 4.2.2)
 utf8          1.2.3      2023-01-31 [1] CRAN (R 4.2.2)
 vctrs         0.6.2      2023-04-19 [1] CRAN (R 4.2.2)
 vroom         1.6.1      2023-01-22 [1] CRAN (R 4.2.2)
 withr         2.5.0      2022-03-03 [1] CRAN (R 4.2.2)
 wk            0.7.2      2023-03-17 [1] CRAN (R 4.2.2)
 xfun          0.37       2023-01-31 [1] CRAN (R 4.2.2)
 xtable        1.8-4      2019-04-21 [1] CRAN (R 4.2.2)

 [1] /home/haf/einarhj/R/x86_64-pc-linux-gnu-library/4.2
 [2] /usr/local/lib/R/site/x86_64-pc-linux-gnu-library/4.2
 [3] /usr/lib/R/library

──────────────────────────────────────────────────────────────────────────────
> 
> 
> 
